[{"/home/peter/repos/ciai/ciai/client/src/Home.js":"1","/home/peter/repos/ciai/ciai/client/src/Api.js":"2","/home/peter/repos/ciai/ciai/client/src/TransactionEdit.js":"3","/home/peter/repos/ciai/ciai/client/src/index.js":"4","/home/peter/repos/ciai/ciai/client/src/NavBar.js":"5","/home/peter/repos/ciai/ciai/client/src/TransactionsList.js":"6","/home/peter/repos/ciai/ciai/client/src/AccountEdit.js":"7","/home/peter/repos/ciai/ciai/client/src/AccountsList.js":"8","/home/peter/repos/ciai/ciai/client/src/Projection.js":"9","/home/peter/repos/ciai/ciai/client/src/App.js":"10","/home/peter/repos/ciai/ciai/client/src/ProjectionTableRow.js":"11","/home/peter/repos/ciai/ciai/client/src/reportWebVitals.js":"12","/home/peter/repos/ciai/ciai/client/src/GoalTableRow.js":"13"},{"size":1448,"mtime":1612369339052,"results":"14","hashOfConfig":"15"},{"size":9897,"mtime":1612399276064,"results":"16","hashOfConfig":"15"},{"size":16233,"mtime":1612383747634,"results":"17","hashOfConfig":"15"},{"size":547,"mtime":1611967972915,"results":"18","hashOfConfig":"15"},{"size":1657,"mtime":1611994810173,"results":"19","hashOfConfig":"15"},{"size":6782,"mtime":1612234342411,"results":"20","hashOfConfig":"15"},{"size":3411,"mtime":1612215283262,"results":"21","hashOfConfig":"15"},{"size":3534,"mtime":1612221856877,"results":"22","hashOfConfig":"15"},{"size":6574,"mtime":1612399265992,"results":"23","hashOfConfig":"15"},{"size":4134,"mtime":1612197009009,"results":"24","hashOfConfig":"15"},{"size":3474,"mtime":1612386351241,"results":"25","hashOfConfig":"15"},{"size":362,"mtime":1611967872138,"results":"26","hashOfConfig":"15"},{"size":3402,"mtime":1612397771281,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"xlnn8y",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/peter/repos/ciai/ciai/client/src/Home.js",["59"],"/home/peter/repos/ciai/ciai/client/src/Api.js",[],"/home/peter/repos/ciai/ciai/client/src/TransactionEdit.js",["60"],"import React, {Component} from 'react';\nimport {Link, withRouter} from 'react-router-dom';\nimport {Select, TextField, InputLabel, MenuItem, FormControl, FormControlLabel,\nFormGroup, InputAdornment, Container, Button, Grid, Checkbox,\nFormLabel, RadioGroup, Radio} from \"@material-ui/core\";\nimport {Alert} from \"@material-ui/lab\";\nimport {KeyboardDatePicker} from '@material-ui/pickers';\nimport {MuiPickersUtilsProvider} from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\n\nclass TransactionEdit extends Component {\n\n    emptyItem = {\n        description: '',\n        amount: '',\n        date: new Date(),\n        userId: this.props.userId\n    };\n    emptyRecurringItem = {\n        description: '',\n        amount: '',\n        startDate: new Date(),\n        endDate: new Date(),\n        userId: this.props.userId,\n        daysInterval: 0,\n        type: \"INTERVAL_FREQUENCY\"\n    };\n    emptyAccount = {\n        name: '',\n        currentBalance: '',\n        userId: this.props.userId\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            item: this.emptyItem,\n            recurringItem: this.emptyRecurringItem,\n            errorMessage: null,\n            isCreate: false,\n            account : this.emptyAccount,\n            toAccount : this.emptyAccount,\n            accountsForLookup : [],\n            isRecurring : false,\n            isTransfer: false\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleAccountChange = this.handleAccountChange.bind(this);\n        this.handleToAccountChange = this.handleToAccountChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleDateChange = this.handleDateChange.bind(this);\n        this.handleRecurChange = this.handleRecurChange.bind(this);\n        this.handleTransferChange = this.handleTransferChange.bind(this);\n        this.handleTypeChange = this.handleTypeChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n        this.handleIntervalChange = this.handleIntervalChange.bind(this);\n        this.handleDayOfMonthChange = this.handleDayOfMonthChange.bind(this);\n    }\n\n    async componentDidMount() {\n        this.state.isCreate = this.props.match.params.id === 'new'; // are we editing or creating?\n        const isRecurring = this.props.location.param1;\n        if (!this.state.isCreate) {\n            let response;\n            if (!isRecurring) {\n                response  = await this.props.api.getTransactionById(this.props.match.params.id);\n                const transaction = await response.json();\n                this.setState({item: transaction});\n            }\n            else {\n                response = await this.props.api.getRecurringTransactionById(this.props.match.params.id);\n                const recurringTransaction = await response.json();\n                this.setState({recurringItem: recurringTransaction, isTransfer: !!recurringTransaction.toAccount});\n            }\n            const accResponse = await this.props.api.getTransactionAccount(this.props.match.params.id, isRecurring);\n            const account = await accResponse.json();\n            this.setState({account: account, isRecurring : isRecurring});\n\n            const toAccResponse = await this.props.api.getTransactionToAccount(this.props.match.params.id, isRecurring);\n            if (toAccResponse.ok) {\n                const toAccount = await toAccResponse.json();\n                this.setState({toAccount: toAccount, isRecurring : isRecurring, isTransfer: true})\n            }\n            else {\n                this.setState({isRecurring : isRecurring, isTransfer: false})\n            }\n        }\n        const response = await this.props.api.getAllAccountsForUser();\n        if (!response.ok) {\n            this.setState({\n                    errorMessage: `Failed to load accounts: ${response.status} ${response.statusText}`,\n                    isLoading: false\n                }\n            )\n        }\n        else {\n            const accounts = await response.json();\n            this.setState({\n                accountsForLookup: accounts\n            });\n        }\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const id = target.id;\n        if (this.state.isRecurring) {\n            let recurringItem = {...this.state.recurringItem};\n            recurringItem[id] = value;\n            this.setState({recurringItem: recurringItem});\n        }\n        else {\n            let item = {...this.state.item};\n            item[id] = value;\n            this.setState({item});\n        }\n    }\n\n    handleDateChange(date) {\n        if (this.state.isRecurring) {\n            let recurringItem = {...this.state.recurringItem};\n            recurringItem[\"startDate\"] = new Date(date);\n            this.setState({recurringItem: recurringItem});\n        }\n        else {\n            let item = {...this.state.item};\n            item[\"date\"] = new Date(date);\n            this.setState({item: item});\n        }\n    }\n\n    handleEndDateChange(date) {\n        if (!this.state.isRecurring) return;\n        let recurringItem = {...this.state.recurringItem};\n        recurringItem[\"endDate\"] = new Date(date);\n        this.setState({recurringItem: recurringItem});\n    }\n\n    handleAccountChange(event) {\n        const accName = event.target.value;\n        const acc = this.state.accountsForLookup.find(acc => acc.name === accName);\n        this.setState({account: acc});\n    }\n\n    handleToAccountChange(event) {\n        const accName = event.target.value;\n        const acc = this.state.accountsForLookup.find(acc => acc.name === accName);\n        this.setState({toAccount: acc});\n    }\n\n    handleRecurChange(event) {\n        this.setState({isRecurring: event.target.checked});\n    }\n\n    handleTransferChange(event) {\n        this.setState({isTransfer: event.target.checked});\n    }\n\n    handleTypeChange(event) {\n        if (!this.state.isRecurring) return;\n        let recurringItem = {...this.state.recurringItem};\n        recurringItem[\"type\"] = event.target.value;\n        this.setState({recurringItem: recurringItem});\n    }\n\n    handleIntervalChange(event) {\n        if (!this.state.isRecurring) return;\n        let recurringItem = {...this.state.recurringItem};\n        recurringItem[\"daysInterval\"] = event.target.value;\n        this.setState({recurringItem: recurringItem});\n    }\n\n    handleDayOfMonthChange(event) {\n        if (!this.state.isRecurring) return;\n        let recurringItem = {...this.state.recurringItem};\n        recurringItem[\"dayOfMonth\"] = event.target.value;\n        this.setState({recurringItem: recurringItem});\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault();\n        const {item, recurringItem, isCreate, account, toAccount, isRecurring} = this.state;\n\n        let result = !isRecurring ?\n            (isCreate\n                ? await this.props.api.createTransaction(item, account, toAccount)\n                : await this.props.api.updateTransaction(item, account, toAccount)) :\n            (isCreate\n                ? await this.props.api.createRecurringTransaction(recurringItem, account, toAccount)\n                : await this.props.api.updateRecurringTransaction(recurringItem, account, toAccount));\n\n        if (!result.ok) {\n            this.setState({errorMessage: `Failed to ${isCreate ? 'create' : 'update'} record: ${result.status} ${result.statusText}`})\n        } else {\n            this.setState({errorMessage: null});\n            this.props.history.push('/transactions');\n        }\n\n    }\n\n    render() {\n        const {item, recurringItem, errorMessage, isCreate, account, toAccount, isRecurring, isTransfer} = this.state;\n        const boundItem = isRecurring ? recurringItem : item;\n        const date = isRecurring ? new Date(boundItem.startDate) : new Date(boundItem.date);\n        const endDate = isRecurring ? new Date(boundItem.endDate) : new Date();\n        const title = <h2>{isCreate ? 'Add Transaction' : 'Edit Transaction'}</h2>;\n        const accountsForLookup = this.state.accountsForLookup;\n\n        console.log(`interval is ${boundItem.daysInterval}`);\n\n        return (\n            <div>\n                {this.props.navbar}\n                <Container style={{textAlign: 'left'}}>\n                    {title}\n                    {errorMessage ?\n                        <Alert severity=\"warning\">\n                            {errorMessage}\n                        </Alert> : null\n                    }\n                    <form onSubmit={this.handleSubmit}>\n                        <div className=\"row\">\n                            <FormGroup className=\"col-md-4 mb-3\">\n                                <FormControlLabel\n                                    control={\n                                        <Checkbox\n                                            disabled={!isCreate}\n                                            checked={isRecurring}\n                                            onChange={this.handleRecurChange}\n                                            color=\"primary\"\n                                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                        />}\n                                    label=\"Recurring?\"\n                                />\n                            </FormGroup>\n                            <FormGroup className=\"col-md-8 mb-3\">\n                                <TextField id=\"description\" label=\"Description\" value={boundItem.description || ''}\n                                           onChange={this.handleChange} />\n                            </FormGroup>\n                            <FormGroup className=\"col-md-4 mb-3\">\n                                <TextField id=\"amount\" label=\"Amount\" value={boundItem.amount}\n                                           onChange={this.handleChange}\n                                           InputProps={{\n                                               startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                                           }} />\n                            </FormGroup>\n                            <FormGroup className=\"col-md-4 mb-3\">\n                                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                                    <KeyboardDatePicker\n                                        disableToolbar\n                                        variant=\"inline\"\n                                        format=\"MM/dd/yyyy\"\n                                        margin=\"normal\"\n                                        id=\"date-picker\"\n                                        label={isRecurring ? \"Start Date\" : \"Date\"}\n                                        value={date || new Date()}\n                                        onChange={date => this.handleDateChange(date)}\n                                        KeyboardButtonProps={{\n                                            'aria-label': 'change date',\n                                        }}\n                                    />\n                                    <KeyboardDatePicker\n                                        hidden={!isRecurring}\n                                        disableToolbar\n                                        variant=\"inline\"\n                                        format=\"MM/dd/yyyy\"\n                                        margin=\"normal\"\n                                        id=\"end-date-picker\"\n                                        label=\"End Date\"\n                                        value={endDate || new Date()}\n                                        onChange={date => this.handleEndDateChange(date)}\n                                        KeyboardButtonProps={{\n                                            'aria-label': 'change date',\n                                        }}\n                                    />\n                                </MuiPickersUtilsProvider>\n                            </FormGroup>\n                            <FormGroup  className=\"col-md-4 mb-3\" hidden={!isRecurring}>\n                                <FormControl component=\"fieldset\">\n                                    <FormLabel component=\"legend\">Recurrence Type</FormLabel>\n                                    <RadioGroup aria-label=\"gender\" name=\"interval\" value={boundItem.type || \"INTERVAL_FREQUENCY\"} onChange={this.handleTypeChange}>\n                                        <FormControlLabel value=\"INTERVAL_FREQUENCY\" control={<Radio />} label=\"Frequency\" />\n                                        <FormControlLabel value=\"DAYS_OF_MONTH\" control={<Radio />} label=\"Day of Month\" />\n                                    </RadioGroup>\n                                </FormControl>\n                                <FormGroup className=\"col-md-4 mb-3\">\n                                    <TextField id=\"interval\" label=\"Interval in Days\" value={boundItem.daysInterval || ''}\n                                               onChange={this.handleIntervalChange}\n                                               hidden={!isRecurring || boundItem.type === \"DAYS_OF_MONTH\"}\n                                    />\n                                    <TextField id=\"dayOfMonth\" label=\"Day of Month\" value={boundItem.dayOfMonth || ''}\n                                               onChange={this.handleDayOfMonthChange}\n                                               hidden={!isRecurring || boundItem.type === \"INTERVAL_FREQUENCY\"}\n                                    />\n                                </FormGroup>\n                            </FormGroup>\n                        </div>\n                        <FormGroup>\n                            <InputLabel id=\"account-select-label\">Account</InputLabel>\n                            <FormControl className=\"col-md-4 mb-3\">\n                                <Select value={account.name} id={\"account-select\"} labelId={\"account-select-label\"}\n                                    onChange={this.handleAccountChange}>\n                                    {accountsForLookup.map(acc =>\n                                        <MenuItem key={acc.id} value={acc.name}>{acc.name}</MenuItem>\n                                    )}\n                                </Select>\n                            </FormControl>\n                        </FormGroup>\n                        <FormGroup className=\"col-md-4 mb-3\">\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    checked={isTransfer}\n                                    onChange={this.handleTransferChange}\n                                    color=\"primary\"\n                                    inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                />}\n                            label=\"Transfer?\"\n                        />\n                    </FormGroup>\n                        <FormGroup hidden={!isTransfer}>\n                            <InputLabel id=\"to-account-select-label\">To Account</InputLabel>\n                            <FormControl className=\"col-md-4 mb-3\">\n                                <Select value={toAccount.name} id={\"to-account-select\"} labelId={\"to-account-select-label\"}\n                                        onChange={this.handleToAccountChange}>\n                                    {accountsForLookup.map(acc =>\n                                        <MenuItem key={acc.id} value={acc.name}>{acc.name}</MenuItem>\n                                    )}\n                                </Select>\n                            </FormControl>\n                        </FormGroup>\n                        <FormGroup>\n                            <Button variant=\"contained\" color=\"primary\" type=\"submit\">Save</Button>{' '}\n                            <Button color=\"primary\" component={Link} to=\"/transactions\">Cancel</Button>\n                        </FormGroup>\n                    </form>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(TransactionEdit);\n",["61","62"],"/home/peter/repos/ciai/ciai/client/src/index.js",[],["63","64"],"/home/peter/repos/ciai/ciai/client/src/NavBar.js",[],"/home/peter/repos/ciai/ciai/client/src/TransactionsList.js",[],["65","66"],"/home/peter/repos/ciai/ciai/client/src/AccountEdit.js",[],"/home/peter/repos/ciai/ciai/client/src/AccountsList.js",[],["67","68"],"/home/peter/repos/ciai/ciai/client/src/Projection.js",["69"],"/home/peter/repos/ciai/ciai/client/src/App.js",[],"/home/peter/repos/ciai/ciai/client/src/ProjectionTableRow.js",[],"/home/peter/repos/ciai/ciai/client/src/reportWebVitals.js",[],"/home/peter/repos/ciai/ciai/client/src/GoalTableRow.js",[],{"ruleId":"70","severity":2,"message":"71","line":21,"column":30,"nodeType":"72","endLine":21,"endColumn":39},{"ruleId":"73","severity":1,"message":"74","line":4,"column":47,"nodeType":"75","messageId":"76","endLine":4,"endColumn":51},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"77","replacedBy":"81"},{"ruleId":"79","replacedBy":"82"},{"ruleId":"77","replacedBy":"83"},{"ruleId":"79","replacedBy":"84"},{"ruleId":"77","replacedBy":"85"},{"ruleId":"79","replacedBy":"86"},{"ruleId":"73","severity":1,"message":"87","line":5,"column":5,"nodeType":"75","messageId":"76","endLine":5,"endColumn":8},"react/jsx-no-undef","'TextField' is not defined.","JSXIdentifier","no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","no-native-reassign",["88"],"no-negated-in-lhs",["89"],["88"],["89"],["88"],["89"],["88"],["89"],"'Box' is defined but never used.","no-global-assign","no-unsafe-negation"]